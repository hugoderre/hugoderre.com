security:
    enable_authenticator_manager: true
    # https://symfony.com/doc/current/security.html#registering-the-user-hashing-passwords
    password_hashers:
        Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface: 'auto'
        App\Entity\User:
            algorithm: auto

    # https://symfony.com/doc/current/security.html#loading-the-user-the-user-provider
    providers:
        # used to reload user from session & other features (e.g. switch_user)
        app_user_provider:
            entity:
                class: App\Entity\User
                property: username
    firewalls:
        dev:
            pattern: ^/(_(profiler|wdt)|css|images|js)/
            security: false
            access_denied_handler: App\Security\AccessDeniedHandler
        main:
            lazy: true
            provider: app_user_provider
            custom_authenticator: App\Security\SecurityAuthenticator
            access_denied_handler: App\Security\AccessDeniedHandler
            # form_login:
            #     login_path: security_login
            #     check_path: security_login
            #     username_parameter: login[username]
            #     password_parameter: login[password]
                # default_target_path: after_login_route_name - Redirect après succes
                # failure_path: login_failure_route_name - Redirect après échec
                # use_referer: true
            logout: 
                path: logout
                # target: blog - Redirect après logout
                

            # activate different ways to authenticate
            # https://symfony.com/doc/current/security.html#the-firewall

            # https://symfony.com/doc/current/security/impersonating_user.html
            # switch_user: true

    # Easy way to control access for large sections of your site
    # Note: Only the *first* access control that matches will be used
    access_control:
        - { path: ^/admin, roles: ROLE_ADMIN }
        # - { path: ^/profile, roles: ROLE_USER }
